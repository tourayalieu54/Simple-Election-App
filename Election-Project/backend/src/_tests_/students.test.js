import mongoose from 'mongoose'
import { describe, expect, test, beforeEach, afterEach } from '@jest/globals'

import { createStudent, listAllStudents, findByMatNumber, findStudentById, updateStudent, deleteStudent } from '../services/student'
import { Student } from '../db/models/student.js'

const sampleStudents = [
    {firstName: 'Fatima', middleName: 'K', lastName: 'Mendy', matNumber: '22222222', department: 'ICT'},
    {firstName: 'Saikou', lastName: 'Gassama', matNumber: '33333333', department: 'SOSA'},
    {firstName: 'Rohey', lastName: 'Jatta', matNumber: '44444444', department: 'ICT'}
]
// Note that I sometimes ignore the fields that are not required (meaning there presence or absence does not make a difference),
// such as middleName (some people don't have middle names) and also cadidateChoices has a default value of empty array
// But absence of the required fields such as firstName, lastName and the likes would make data insertion to the database fail

let createdSampleStudents = []

beforeEach(async ()=> {
    try{
        //await Student.deleteMany({})// clearing everything from the database
        //const count = await Student.countDocuments()
        //console.log("The database has ", count," records right now!")
        createdSampleStudents = [] //Clearing the array which will be holding all the students we inserted into the database
        for(const student of sampleStudents){
            const createdStudent = new Student(student)
            createdSampleStudents.push(await createdStudent.save()) //sending each sample student to the database one by one (not through our data insertion method in the student service file)
            // note that the save function there does not return student object, is simply return the document with its _id field populated
            // therefore should be converted to normal javascript object to compare it with any quried object(queried objects have their meta data removed).
        }
    }catch (error) {
        console.error("Error during setup:", error);
    }
})


//use the describe function to define new test
describe('creating students', ()=>{
    test ('should succeed', async () => {
        const student = {
            firstName: 'Fatima',
            middleName: 'Al Amin',
            lastName: 'Kinteh',
            matNumber: '22226063',
            department: 'ICT',
        }
        const createdStudent = await createStudent(student) // sending data to the database, and createdStudent will then hold the object

        expect(createdStudent._id).toBeInstanceOf(mongoose.Types.ObjectId) // Asserting that the id of the produced student(createdStudent) is indeed generated by mongodb (through mongoose)

        const foundStudent = await Student.findById(createdStudent._id)
        expect (foundStudent).toEqual(expect.objectContaining(student))
        expect (foundStudent.updatedAt).toBeInstanceOf(Date)
        expect (foundStudent.createdAt).toBeInstanceOf(Date)
    })

    test('Should fail due duplication in matNumber which was declared unique', async () => {
        const student2 = { firstName: 'Alieu', lastName: 'Kinteh', matNumber:'33333333', department: 'Nutrition' }; // Duplicate matNumber
        await expect(createStudent(student2)).rejects.toThrow(/duplicate key error/);
    })

    test('Missing any of the following: matNumber, firstName, lastName, department should fail', async ()=>{
        const student = {
            lastName: "kinteh",
            department: "Nutrition",
            matNumber: "33333333",
            candidateChoices: []
        }
        try {
            await createStudent(student)
        } catch (err) {
            expect(err).toBeInstanceOf(mongoose.Error.ValidationError)
            expect(err.message).toContain('`firstName` is required')
            }
    })
})



describe('listing students', ()=>{
    test('should return all students', async () => {
        const students = await listAllStudents()
        expect(students.length).toEqual(createdSampleStudents.length)
    })


    test('should return a student with matNumber', async () =>{
        const MAT_NUMBER = '33333333'
        const student = await findByMatNumber(MAT_NUMBER)
        expect(student).toEqual(
            expect.objectContaining({
                firstName: 'Saikou',
                lastName: 'Gassama',
                matNumber: MAT_NUMBER,
                department: 'SOSA',
            })
        ); 
    })

    test('should not find non-existing matNumber', async () => {
        const NON_EXISTING_MAT_NUMBER = '24242424'
        const student = await findByMatNumber(NON_EXISTING_MAT_NUMBER)
        expect(student).toEqual(null)
    })

    test('should find a student by ID', async () => {
        const studentId = createdSampleStudents[0]._id;
        const student = await findStudentById(studentId);
        
        expect(student).toBeDefined(); // Ensure the student exists
        expect(student._id).toEqual(studentId); // Assert the ID matches
        expect(student).toMatchObject(createdSampleStudents[0].toObject()); // Verify other properties match (Don't forget to convert the array object to javascript object)
    });

    test('should not find non-existing id', async () => {
        //const student = await findStudentById('00000000000000000000') // inially using this but it's problematic because it is not a valid mongoose object id which inturns triggers an error
        const nonExistingId = new mongoose.Types.ObjectId(); //now getting mongoose (using the ObjectId constructor) to generate a valid id but non_existent in the database
        const student = await findStudentById() 
        expect(student).toEqual(null)
    })

})

describe('updating student records', ()=>{
    test('should update existing student record', async () => {
        await updateStudent(createdSampleStudents[0]._id, {middleName: 'Alieu',})
        const updatedStudent = await findStudentById(createdSampleStudents[0]._id)
        expect(updatedStudent.middleName).toEqual('Alieu')
    })

    test('should not update non-existing student record', async () => {
        const result = await updateStudent( new mongoose.Types.ObjectId(), {firstName: 'Yusuf',})
        expect(result).toEqual(null)
    })
})

describe('deleting a student record (object)', ()=>{
    test('should delete existing student', async () => {
        await deleteStudent(createdSampleStudents[0]._id)
        const deletedStudent = await Student.findById(createdSampleStudents[0]._id)
        expect(deletedStudent).toEqual(null)
    })
})
    
